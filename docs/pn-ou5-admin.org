* Administration tasks for Teresa PN Ou 5 project

** Managing the Python environment
+ Managed with anaconda
+ Python version and required packages are listed in [[file:../environment.yml]]
+ For more details, see [[https://haveagreatdata.com/posts/data-science-python-dependency-management/][this blog post]]
+ I wanted to try Python 3.10 but it seems that there is no astropy available for that version yet
*** Installing the environment
This only needs to be run once on a given machine:
#+begin_src sh :dir .. :eval no
  conda env create -f environment.yml 
#+end_src

*** Activating the environment
+ In terminal
  #+begin_src sh
    conda activate pn-ou5
  #+end_src
+ In Emacs
  #+begin_src emacs-lisp :results silent
    (pyvenv-activate (expand-file-name "~/miniconda3/envs/pn-ou5"))
  #+end_src
  Or use the ~VirtualEnvs->Activate~ menu item
  + To deactivate
    #+begin_src emacs-lisp :results silent
      (pyvenv-deactivate)
    #+end_src
*** Updating the environment
+ Add new dependencies to [[file:~/Dropbox/teresa-pn-ou5/environment.yml][~environment.yml~]]
+ Run one of the following to install new packages and remove unwanted ones:
  + Mamba
    #+begin_src sh
      mamba env update --prune
    #+end_src
  + Conda
    #+begin_src sh
      conda env update --prune
    #+end_src
+ In principle, Mamba should be faster

** Installing the source library
+ I am going to try and do things properly this time
  + So instead of adding to ~sys.packages~ I will make my library code be a proper package and install it with pip
  + I want to have an editable install so that it automatically gets changes
  + There are various ways of doing this
    + setuptools
    + poetry
    + flit
  + I am going to try flit
+ Package is called ~mes_longslit~


*** Setting up flit
This is following the instructions in the [[https://flit.readthedocs.io/en/latest/index.html][flit docs]]

1. I added flit to [[file:~/Dropbox/teresa-pn-ou5/environment.yml][~environment.yml~]] and updated environment
2. I ran ~flit init~ and answered the questions
3. This made my [[file:~/Dropbox/teresa-pn-ou5/pyproject.toml][pyproject.toml]] file
4. Edit it to add more stuff, such as minimum python version


*** Installing local version with flit
#+begin_src sh
  flit install --symlink
#+end_src
The option ~--symlink~ is what makes it an editable install.  On Windows one would have to use ~--pth-file~ instead.

*** DONE Testing locally installed version
CLOSED: [2021-11-01 Mon 20:01]

Try it both ways:
1. Executing source block directly (~C-c C-c~ in following block)
2. Tangle to file and then run that file from a shell source block (~C-c x~ in following block)

#+begin_src python :tangle test-import.py :results output verbatim
  import sys

  import mes_longslit
  print(mes_longslit.__version__)
#+end_src

#+RESULTS:
: 0.1

#+begin_src sh :results verbatim
  echo $VIRTUAL_ENV
  which python
  python ./test-import.py
#+end_src

#+RESULTS:
: /Users/will/miniconda3/envs/pn-ou5/
: /Users/will/miniconda3/envs/pn-ou5/bin/python
: 0.1


*** Publishing the package
+ At the moment I do not want to do this
+ But if I ever do in the future I can use ~flit publish~


*** Resources on package management
+ [[https://www.blog.pythonlibrary.org/2021/09/23/python-101-how-to-create-a-python-package/][Python 101 - How to Create a Python Package]]
  + Very thorough but uses outdated setup.py method
+ [[https://packaging.python.org/tutorials/packaging-projects/#configuring-metadata][Packaging Python Projects]]
  + Tutorial on packaging.python.org
  + Explains directory layout and use of ~pyproject.toml~
  + Uses setuptools method as an example, but also mentions other options such as poetry and flit
+ [[https://flit.readthedocs.io/en/latest/index.html][Flit documentation]]
  + This is basically what I followed
+ [[https://ealizadeh.com/blog/guide-to-python-env-pkg-dependency-using-conda-poetry][A Guide to Python Environment, Dependency and Package Management: Conda + Poetry]]
  + An alternative way of doing things, using:
    + conda but only for managing environment
    + pip for package installs
    + poetry for dependency management
  + I am not using this at the moment, but I might switch to it later
    + It has the advantage that the dependencies are all in pyproject.toml
    + Poetry can have separate normal and dev dependencies
    + But som of his criticism of using conda for dependency management is obviated if you use mamba instead 

** Maintaining the jupyter notebooks
+ Use jupytext
+ Sync pure python version of all notebooks
  #+begin_src sh :dir ../notebooks :results verbatim
    jupytext --sync *.ipynb
  #+end_src

  #+RESULTS:
  #+begin_example
  [jupytext] Reading 00-00-inspect-orig-files.ipynb in format ipynb
  [jupytext] Loading 00-00-inspect-orig-files.py
  [jupytext] Updating the timestamp of 00-00-inspect-orig-files.py
  [jupytext] Reading 01-01-median-image.ipynb in format ipynb
  [jupytext] Loading 01-01-median-image.py
  [jupytext] Updating the timestamp of 01-01-median-image.py
  [jupytext] Reading 02-01-test-normalize.ipynb in format ipynb
  [jupytext] Loading 02-01-test-normalize.py
  [jupytext] Updating the timestamp of 02-01-test-normalize.py
  [jupytext] Reading 02-02-o3-normalize.ipynb in format ipynb
  [jupytext] Loading 02-02-o3-normalize.py
  [jupytext] Updating the timestamp of 02-02-o3-normalize.py
  [jupytext] Reading 03-01-test-vmap.ipynb in format ipynb
  [jupytext] Updating 03-01-test-vmap.py
  #+end_example

+ Or this version if we have added a new notebook
    #+begin_src sh :dir ../notebooks :results verbatim
    jupytext --set-formats ipynb,py:light 03*.ipynb
  #+end_src

  #+RESULTS:
  : [jupytext] Reading 03-01-test-vmap.ipynb in format ipynb
  : [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  : [jupytext] Updating 03-01-test-vmap.ipynb
  : [jupytext] Updating 03-01-test-vmap.py

